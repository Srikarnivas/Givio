#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 64
    bytecblock "total_donations" "creator_address" "target" 0x151f7c75 "campaign_active"
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@16
    pushbytess 0xbd7b22b6 0x18ab923b 0x313f7889 0xc96047fc 0xeb286421 0x818b17a9 0x21f1ddff 0x756cbd69 0x05713d80 0x24378d3c // method "create(uint512,bool)void", method "toggle_campaign(bool)void", method "get_campaign_details()(address,uint512,uint512,bool)", method "is_target_reached()bool", method "donate(pay)void", method "get_total_donations()uint512", method "withdraw(uint64)void", method "get_remaining_target()uint512", method "update_details(uint512,account)void", method "delete()void"
    txna ApplicationArgs 0
    match main_create_route@3 main_toggle_campaign_route@4 main_get_campaign_details_route@5 main_is_target_reached_route@6 main_donate_route@7 main_get_total_donations_route@8 main_withdraw_route@9 main_get_remaining_target_route@10 main_update_details_route@11 main_delete_route@12

main_after_if_else@16:
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    intc_0 // 0
    return

main_delete_route@12:
    // smart_contracts/hello_world/contract.py:68
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete
    intc_1 // 1
    return

main_update_details_route@11:
    // smart_contracts/hello_world/contract.py:62
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/hello_world/contract.py:62
    // @abimethod
    callsub update_details
    intc_1 // 1
    return

main_get_remaining_target_route@10:
    // smart_contracts/hello_world/contract.py:57
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_remaining_target
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdraw_route@9:
    // smart_contracts/hello_world/contract.py:47
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/hello_world/contract.py:47
    // @abimethod()
    callsub withdraw
    intc_1 // 1
    return

main_get_total_donations_route@8:
    // smart_contracts/hello_world/contract.py:43
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_donations
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_donate_route@7:
    // smart_contracts/hello_world/contract.py:33
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/hello_world/contract.py:33
    // @abimethod()
    callsub donate
    intc_1 // 1
    return

main_is_target_reached_route@6:
    // smart_contracts/hello_world/contract.py:29
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub is_target_reached
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_campaign_details_route@5:
    // smart_contracts/hello_world/contract.py:25
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_campaign_details
    dig 2
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 3
    dig 1
    b|
    dig 3
    len
    intc_2 // 64
    <=
    assert // overflow
    uncover 3
    uncover 2
    b|
    pushbytes 0x00
    intc_0 // 0
    uncover 4
    setbit
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_toggle_campaign_route@4:
    // smart_contracts/hello_world/contract.py:20
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    // smart_contracts/hello_world/contract.py:20
    // @abimethod()
    callsub toggle_campaign
    intc_1 // 1
    return

main_create_route@3:
    // smart_contracts/hello_world/contract.py:12
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/hello_world/contract.py:6
    // class Donation(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    // smart_contracts/hello_world/contract.py:12
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create
    intc_1 // 1
    return


// smart_contracts.hello_world.contract.Donation.create(target: bytes, status: uint64) -> void:
create:
    // smart_contracts/hello_world/contract.py:12-13
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create(self, target: BigUInt, status: bool) -> None:
    proto 2 0
    // smart_contracts/hello_world/contract.py:14
    // assert target > 0
    frame_dig -2
    pushbytes 0x
    b>
    assert
    // smart_contracts/hello_world/contract.py:15
    // self.creator_address = Txn.sender
    bytec_1 // "creator_address"
    txn Sender
    app_global_put
    // smart_contracts/hello_world/contract.py:16
    // self.total_donations = BigUInt(0)
    bytec_0 // "total_donations"
    pushbytes 0x
    app_global_put
    // smart_contracts/hello_world/contract.py:17
    // self.target = target
    bytec_2 // "target"
    frame_dig -2
    app_global_put
    // smart_contracts/hello_world/contract.py:18
    // self.campaign_active = status
    bytec 4 // "campaign_active"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.hello_world.contract.Donation.toggle_campaign(status: uint64) -> void:
toggle_campaign:
    // smart_contracts/hello_world/contract.py:20-21
    // @abimethod()
    // def toggle_campaign(self, status: bool) -> None:
    proto 1 0
    // smart_contracts/hello_world/contract.py:22
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    assert
    // smart_contracts/hello_world/contract.py:23
    // self.campaign_active = status
    bytec 4 // "campaign_active"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.hello_world.contract.Donation.get_campaign_details() -> bytes, bytes, bytes, uint64:
get_campaign_details:
    // smart_contracts/hello_world/contract.py:27
    // return self.creator_address, self.total_donations, self.target, self.campaign_active
    intc_0 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    intc_0 // 0
    bytec_2 // "target"
    app_global_get_ex
    assert // check self.target exists
    intc_0 // 0
    bytec 4 // "campaign_active"
    app_global_get_ex
    assert // check self.campaign_active exists
    retsub


// smart_contracts.hello_world.contract.Donation.is_target_reached() -> uint64:
is_target_reached:
    // smart_contracts/hello_world/contract.py:31
    // return self.total_donations == self.target
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    intc_0 // 0
    bytec_2 // "target"
    app_global_get_ex
    assert // check self.target exists
    b==
    retsub


// smart_contracts.hello_world.contract.Donation.donate(donateTxn: uint64) -> void:
donate:
    // smart_contracts/hello_world/contract.py:33-34
    // @abimethod()
    // def donate(self, donateTxn: gtxn.PaymentTransaction ) -> None:
    proto 1 0
    // smart_contracts/hello_world/contract.py:35
    // assert self.campaign_active
    intc_0 // 0
    bytec 4 // "campaign_active"
    app_global_get_ex
    assert // check self.campaign_active exists
    assert
    // smart_contracts/hello_world/contract.py:36
    // assert donateTxn.sender == Txn.sender
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/hello_world/contract.py:37
    // assert donateTxn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/hello_world/contract.py:38
    // assert donateTxn.amount > 0
    frame_dig -1
    gtxns Amount
    dup
    assert
    // smart_contracts/hello_world/contract.py:39
    // assert self.total_donations+donateTxn.amount <= self.target
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    swap
    itob
    b+
    intc_0 // 0
    bytec_2 // "target"
    app_global_get_ex
    assert // check self.target exists
    dig 1
    b>=
    assert
    // smart_contracts/hello_world/contract.py:41
    // self.total_donations += donateTxn.amount
    bytec_0 // "total_donations"
    swap
    app_global_put
    retsub


// smart_contracts.hello_world.contract.Donation.get_total_donations() -> bytes:
get_total_donations:
    // smart_contracts/hello_world/contract.py:45
    // return self.total_donations
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    retsub


// smart_contracts.hello_world.contract.Donation.withdraw(amount: uint64) -> void:
withdraw:
    // smart_contracts/hello_world/contract.py:47-48
    // @abimethod()
    // def withdraw(self, amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/hello_world/contract.py:49
    // assert self.creator_address == Txn.sender
    intc_0 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    dup
    txn Sender
    ==
    assert
    // smart_contracts/hello_world/contract.py:50
    // assert self.total_donations >= amount
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    frame_dig -1
    itob
    b>=
    assert
    // smart_contracts/hello_world/contract.py:51-55
    // itxn.Payment(
    //     amount = amount,
    //     receiver= self.creator_address,
    //     fee = 0
    // ).submit()
    itxn_begin
    itxn_field Receiver
    frame_dig -1
    itxn_field Amount
    // smart_contracts/hello_world/contract.py:51
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/hello_world/contract.py:54
    // fee = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/hello_world/contract.py:51-55
    // itxn.Payment(
    //     amount = amount,
    //     receiver= self.creator_address,
    //     fee = 0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.hello_world.contract.Donation.get_remaining_target() -> bytes:
get_remaining_target:
    // smart_contracts/hello_world/contract.py:59
    // return self.target - self.total_donations
    intc_0 // 0
    bytec_2 // "target"
    app_global_get_ex
    assert // check self.target exists
    intc_0 // 0
    bytec_0 // "total_donations"
    app_global_get_ex
    assert // check self.total_donations exists
    b-
    retsub


// smart_contracts.hello_world.contract.Donation.update_details(target: bytes, wallet: bytes) -> void:
update_details:
    // smart_contracts/hello_world/contract.py:62-63
    // @abimethod
    // def update_details(self, target: BigUInt, wallet: Account) -> None:
    proto 2 0
    // smart_contracts/hello_world/contract.py:64
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    assert
    // smart_contracts/hello_world/contract.py:65
    // self.creator_address = wallet
    bytec_1 // "creator_address"
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.py:66
    // self.target = target
    bytec_2 // "target"
    frame_dig -2
    app_global_put
    retsub


// smart_contracts.hello_world.contract.Donation.delete() -> void:
delete:
    // smart_contracts/hello_world/contract.py:70
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    swap
    dig 1
    ==
    assert
    // smart_contracts/hello_world/contract.py:72-77
    // itxn.Payment(
    //     receiver= self.creator_address,
    //     amount = 0,
    //     close_remainder_to= self.creator_address,
    //     fee= 1_000,
    // ).submit()
    itxn_begin
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/hello_world/contract.py:74
    // amount = 0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/hello_world/contract.py:72
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/hello_world/contract.py:76
    // fee= 1_000,
    pushint 1000 // 1000
    itxn_field Fee
    // smart_contracts/hello_world/contract.py:72-77
    // itxn.Payment(
    //     receiver= self.creator_address,
    //     amount = 0,
    //     close_remainder_to= self.creator_address,
    //     fee= 1_000,
    // ).submit()
    itxn_submit
    retsub
