/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Donation","structs":{},"methods":[{"name":"create","args":[{"type":"uint512","name":"target"},{"type":"bool","name":"status"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"toggle_campaign","args":[{"type":"bool","name":"status"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_campaign_details","args":[],"returns":{"type":"(address,uint512,uint512,bool)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"is_target_reached","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"donate","args":[{"type":"pay","name":"donateTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_total_donations","args":[],"returns":{"type":"uint512"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_remaining_target","args":[],"returns":{"type":"uint512"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"update_details","args":[{"type":"uint512","name":"target"},{"type":"account","name":"wallet"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creator_address":{"keyType":"AVMString","valueType":"address","key":"Y3JlYXRvcl9hZGRyZXNz"},"total_donations":{"keyType":"AVMString","valueType":"AVMBytes","key":"dG90YWxfZG9uYXRpb25z"},"target":{"keyType":"AVMString","valueType":"AVMBytes","key":"dGFyZ2V0"},"campaign_active":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2FtcGFpZ25fYWN0aXZl"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[157],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[169,190,214,230,254,276,299,356,373],"errorMessage":"OnCompletion is not NoOp"},{"pc":[377],"errorMessage":"can only call when creating"},{"pc":[160,172,193,217,233,257,279,302,359],"errorMessage":"can only call when not creating"},{"pc":[451,470],"errorMessage":"check self.campaign_active exists"},{"pc":[426,438,524,572,589],"errorMessage":"check self.creator_address exists"},{"pc":[446,460,504,557],"errorMessage":"check self.target exists"},{"pc":[442,456,497,516,533,561],"errorMessage":"check self.total_donations exists"},{"pc":[201,241,311,324],"errorMessage":"overflow"},{"pc":[267],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAFAJgUPdG90YWxfZG9uYXRpb25zD2NyZWF0b3JfYWRkcmVzcwZ0YXJnZXQEFR98dQ9jYW1wYWlnbl9hY3RpdmUxG0EATYIKBL17IrYEGKuSOwQxP3iJBMlgR/wE6yhkIQSBixepBCHx3f8EdWy9aQQFcT2ABCQ3jTw2GgCOCgDcAMsAkgB7AGUATQA9ACUAEAACIkMxGYEFEkQxGESIAaQjQzEZFEQxGEQ2GgE2GgIXwByIAXsjQzEZFEQxGESIAWVJFSQORCSvqytMULAjQzEZFEQxGEQ2GgEXiAElI0MxGRREMRhEiAEUSRUkDkQkr6srTFCwI0MxGRREMRhEMRYjCUk4ECMSRIgAwCNDMRkURDEYRIgAqoABACJPAlQrTFCwI0MxGRREMRhEiACBSwIVJA5EJK9PA0sBq0sDFSQORE8DTwKrgAEAIk8EVE8DTwNQTwJQTFArTFCwI0MxGRREMRhENhoBIlOIADIjQzEZFEQxGBRENhoBNhoCIlOIAAIjQ4oCAIv+gAClRCkxAGcogABnKov+ZycEi/9niYoBADEAIillRBJEJwSL/2eJIillRCIoZUQiKmVEIicEZUSJIihlRCIqZUSoiYoBACInBGVERIv/OAAxABJEi/84BzIKEkSL/zgISUQiKGVETBagIiplREsBp0QoTGeJIihlRImKAQAiKWVESTEAEkQiKGVEi/8Wp0SxsgeL/7III7IQIrIBs4kiKmVEIihlRKGJigIAMQAiKWVEEkQpi/9nKov+Z4kxACIpZURMSwESRLFJsgkisgiyByOyEIHoB7IBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Donation contract
 */
export type DonationArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(uint512,bool)void': {
      target: bigint | number
      status: boolean
    }
    'toggle_campaign(bool)void': {
      status: boolean
    }
    'get_campaign_details()(address,uint512,uint512,bool)': Record<string, never>
    'is_target_reached()bool': Record<string, never>
    'donate(pay)void': {
      donateTxn: AppMethodCallTransactionArgument
    }
    'get_total_donations()uint512': Record<string, never>
    'withdraw(uint64)void': {
      amount: bigint | number
    }
    'get_remaining_target()uint512': Record<string, never>
    'update_details(uint512,account)void': {
      target: bigint | number
      wallet: Uint8Array | string
    }
    'delete()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(uint512,bool)void': [target: bigint | number, status: boolean]
    'toggle_campaign(bool)void': [status: boolean]
    'get_campaign_details()(address,uint512,uint512,bool)': []
    'is_target_reached()bool': []
    'donate(pay)void': [donateTxn: AppMethodCallTransactionArgument]
    'get_total_donations()uint512': []
    'withdraw(uint64)void': [amount: bigint | number]
    'get_remaining_target()uint512': []
    'update_details(uint512,account)void': [target: bigint | number, wallet: Uint8Array | string]
    'delete()void': []
  }
}

/**
 * The return type for each method
 */
export type DonationReturns = {
  'create(uint512,bool)void': void
  'toggle_campaign(bool)void': void
  'get_campaign_details()(address,uint512,uint512,bool)': [string, bigint, bigint, boolean]
  'is_target_reached()bool': boolean
  'donate(pay)void': void
  'get_total_donations()uint512': bigint
  'withdraw(uint64)void': void
  'get_remaining_target()uint512': bigint
  'update_details(uint512,account)void': void
  'delete()void': void
}

/**
 * Defines the types of available calls and state of the Donation smart contract.
 */
export type DonationTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint512,bool)void' | 'create', {
      argsObj: DonationArgs['obj']['create(uint512,bool)void']
      argsTuple: DonationArgs['tuple']['create(uint512,bool)void']
      returns: DonationReturns['create(uint512,bool)void']
    }>
    & Record<'toggle_campaign(bool)void' | 'toggle_campaign', {
      argsObj: DonationArgs['obj']['toggle_campaign(bool)void']
      argsTuple: DonationArgs['tuple']['toggle_campaign(bool)void']
      returns: DonationReturns['toggle_campaign(bool)void']
    }>
    & Record<'get_campaign_details()(address,uint512,uint512,bool)' | 'get_campaign_details', {
      argsObj: DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)']
      argsTuple: DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']
      returns: DonationReturns['get_campaign_details()(address,uint512,uint512,bool)']
    }>
    & Record<'is_target_reached()bool' | 'is_target_reached', {
      argsObj: DonationArgs['obj']['is_target_reached()bool']
      argsTuple: DonationArgs['tuple']['is_target_reached()bool']
      returns: DonationReturns['is_target_reached()bool']
    }>
    & Record<'donate(pay)void' | 'donate', {
      argsObj: DonationArgs['obj']['donate(pay)void']
      argsTuple: DonationArgs['tuple']['donate(pay)void']
      returns: DonationReturns['donate(pay)void']
    }>
    & Record<'get_total_donations()uint512' | 'get_total_donations', {
      argsObj: DonationArgs['obj']['get_total_donations()uint512']
      argsTuple: DonationArgs['tuple']['get_total_donations()uint512']
      returns: DonationReturns['get_total_donations()uint512']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: DonationArgs['obj']['withdraw(uint64)void']
      argsTuple: DonationArgs['tuple']['withdraw(uint64)void']
      returns: DonationReturns['withdraw(uint64)void']
    }>
    & Record<'get_remaining_target()uint512' | 'get_remaining_target', {
      argsObj: DonationArgs['obj']['get_remaining_target()uint512']
      argsTuple: DonationArgs['tuple']['get_remaining_target()uint512']
      returns: DonationReturns['get_remaining_target()uint512']
    }>
    & Record<'update_details(uint512,account)void' | 'update_details', {
      argsObj: DonationArgs['obj']['update_details(uint512,account)void']
      argsTuple: DonationArgs['tuple']['update_details(uint512,account)void']
      returns: DonationReturns['update_details(uint512,account)void']
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: DonationArgs['obj']['delete()void']
      argsTuple: DonationArgs['tuple']['delete()void']
      returns: DonationReturns['delete()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorAddress: string
        totalDonations: BinaryState
        target: BinaryState
        campaignActive: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DonationSignatures = keyof DonationTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DonationNonVoidMethodSignatures = keyof DonationTypes['methods'] extends infer T ? T extends keyof DonationTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Donation smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DonationSignatures> = DonationTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Donation smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DonationSignatures> = DonationTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DonationTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DonationCreateCallParams =
  | Expand<CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & {method: 'create(uint512,bool)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type DonationDeleteCallParams =
  | Expand<CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> & {method: 'delete'}>
  | Expand<CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> & {method: 'delete()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DonationDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DonationCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DonationDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Donation smart contract
 */
export abstract class DonationParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DonationCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(uint512,bool)void':
            return DonationParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Donation smart contract using the create(uint512,bool)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(uint512,bool)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.target, params.args.status],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DonationDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete':
          case 'delete()void':
            return DonationParamsFactory.delete.delete(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Donation smart contract using the delete()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delete(params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the toggle_campaign(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static toggleCampaign(params: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'toggle_campaign(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.status],
    }
  }
  /**
   * Constructs a no op call for the get_campaign_details()(address,uint512,uint512,bool) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCampaignDetails(params: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_campaign_details()(address,uint512,uint512,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_target_reached()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isTargetReached(params: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_target_reached()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the donate(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static donate(params: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'donate(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.donateTxn],
    }
  }
  /**
   * Constructs a no op call for the get_total_donations()uint512 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDonations(params: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_donations()uint512' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_remaining_target()uint512 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRemainingTarget(params: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_remaining_target()uint512' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the update_details(uint512,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateDetails(params: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_details(uint512,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.target, params.args.wallet],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Donation smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DonationFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DonationFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DonationClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DonationClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Donation smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DonationDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DonationParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DonationCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DonationParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DonationDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DonationClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Donation smart contract using the create(uint512,bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DonationParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Donation smart contract using the delete()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delete: (params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DonationParamsFactory.delete.delete(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Donation smart contract using the create(uint512,bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DonationParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Donation smart contract using an ABI method call using the create(uint512,bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<DonationArgs['obj']['create(uint512,bool)void'] | DonationArgs['tuple']['create(uint512,bool)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DonationParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DonationReturns['create(uint512,bool)void']) }, appClient: new DonationClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Donation smart contract
 */
export class DonationClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DonationClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Donation app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DonationClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DonationNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DonationClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DonationClient> {
    return new DonationClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DonationClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DonationClient> {
    return new DonationClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Donation smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delete: (params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.params.delete(DonationParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Donation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Donation smart contract using the `toggle_campaign(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    toggleCampaign: (params: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DonationParamsFactory.toggleCampaign(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_campaign_details()(address,uint512,uint512,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCampaignDetails: (params: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DonationParamsFactory.getCampaignDetails(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `is_target_reached()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isTargetReached: (params: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DonationParamsFactory.isTargetReached(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `donate(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    donate: (params: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DonationParamsFactory.donate(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_total_donations()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDonations: (params: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DonationParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DonationParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_remaining_target()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRemainingTarget: (params: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DonationParamsFactory.getRemainingTarget(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `update_details(uint512,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateDetails: (params: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DonationParamsFactory.updateDetails(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Donation smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delete: (params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DonationParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Donation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Donation smart contract using the `toggle_campaign(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    toggleCampaign: (params: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.toggleCampaign(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_campaign_details()(address,uint512,uint512,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCampaignDetails: (params: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.getCampaignDetails(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `is_target_reached()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isTargetReached: (params: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.isTargetReached(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `donate(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    donate: (params: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.donate(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_total_donations()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDonations: (params: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `get_remaining_target()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRemainingTarget: (params: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.getRemainingTarget(params))
    },

    /**
     * Makes a call to the Donation smart contract using the `update_details(uint512,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateDetails: (params: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DonationParamsFactory.updateDetails(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Donation smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delete: async (params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DonationParamsFactory.delete.delete(params))
        return {...result, return: result.return as unknown as (undefined | DonationReturns['delete()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Donation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Donation smart contract using the `toggle_campaign(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    toggleCampaign: async (params: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.toggleCampaign(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['toggle_campaign(bool)void'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `get_campaign_details()(address,uint512,uint512,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCampaignDetails: async (params: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.getCampaignDetails(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['get_campaign_details()(address,uint512,uint512,bool)'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `is_target_reached()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isTargetReached: async (params: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.isTargetReached(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['is_target_reached()bool'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `donate(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    donate: async (params: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.donate(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['donate(pay)void'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `get_total_donations()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDonations: async (params: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.getTotalDonations(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['get_total_donations()uint512'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['withdraw(uint64)void'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `get_remaining_target()uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRemainingTarget: async (params: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.getRemainingTarget(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['get_remaining_target()uint512'])}
    },

    /**
     * Makes a call to the Donation smart contract using the `update_details(uint512,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateDetails: async (params: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DonationParamsFactory.updateDetails(params))
      return {...result, return: result.return as unknown as (undefined | DonationReturns['update_details(uint512,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DonationClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Donation app
   */
  state = {
    /**
     * Methods to access global state for the current Donation app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorAddress: result.creator_address,
          totalDonations: new BinaryStateValue(result.total_donations),
          target: new BinaryStateValue(result.target),
          campaignActive: result.campaign_active,
        }
      },
      /**
       * Get the current value of the creator_address key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creator_address")) as string | undefined },
      /**
       * Get the current value of the total_donations key in global state
       */
      totalDonations: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("total_donations")) as Uint8Array | undefined) },
      /**
       * Get the current value of the target key in global state
       */
      target: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("target")) as Uint8Array | undefined) },
      /**
       * Get the current value of the campaign_active key in global state
       */
      campaignActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("campaign_active")) as bigint | undefined },
    },
  }

  public newGroup(): DonationComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a toggle_campaign(bool)void method call against the Donation contract
       */
      toggleCampaign(params: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.toggleCampaign(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_campaign_details()(address,uint512,uint512,bool) method call against the Donation contract
       */
      getCampaignDetails(params: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCampaignDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_campaign_details()(address,uint512,uint512,bool)', v))
        return this
      },
      /**
       * Add a is_target_reached()bool method call against the Donation contract
       */
      isTargetReached(params: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isTargetReached(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_target_reached()bool', v))
        return this
      },
      /**
       * Add a donate(pay)void method call against the Donation contract
       */
      donate(params: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.donate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_total_donations()uint512 method call against the Donation contract
       */
      getTotalDonations(params: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDonations(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_donations()uint512', v))
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the Donation contract
       */
      withdraw(params: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_remaining_target()uint512 method call against the Donation contract
       */
      getRemainingTarget(params: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRemainingTarget(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_remaining_target()uint512', v))
        return this
      },
      /**
       * Add a update_details(uint512,account)void method call against the Donation contract
       */
      updateDetails(params: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateDetails(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          delete: (params: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Donation contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DonationComposer
  }
}
export type DonationComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the toggle_campaign(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  toggleCampaign(params?: CallParams<DonationArgs['obj']['toggle_campaign(bool)void'] | DonationArgs['tuple']['toggle_campaign(bool)void']>): DonationComposer<[...TReturns, DonationReturns['toggle_campaign(bool)void'] | undefined]>

  /**
   * Calls the get_campaign_details()(address,uint512,uint512,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCampaignDetails(params?: CallParams<DonationArgs['obj']['get_campaign_details()(address,uint512,uint512,bool)'] | DonationArgs['tuple']['get_campaign_details()(address,uint512,uint512,bool)']>): DonationComposer<[...TReturns, DonationReturns['get_campaign_details()(address,uint512,uint512,bool)'] | undefined]>

  /**
   * Calls the is_target_reached()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isTargetReached(params?: CallParams<DonationArgs['obj']['is_target_reached()bool'] | DonationArgs['tuple']['is_target_reached()bool']>): DonationComposer<[...TReturns, DonationReturns['is_target_reached()bool'] | undefined]>

  /**
   * Calls the donate(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(params?: CallParams<DonationArgs['obj']['donate(pay)void'] | DonationArgs['tuple']['donate(pay)void']>): DonationComposer<[...TReturns, DonationReturns['donate(pay)void'] | undefined]>

  /**
   * Calls the get_total_donations()uint512 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDonations(params?: CallParams<DonationArgs['obj']['get_total_donations()uint512'] | DonationArgs['tuple']['get_total_donations()uint512']>): DonationComposer<[...TReturns, DonationReturns['get_total_donations()uint512'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<DonationArgs['obj']['withdraw(uint64)void'] | DonationArgs['tuple']['withdraw(uint64)void']>): DonationComposer<[...TReturns, DonationReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Calls the get_remaining_target()uint512 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRemainingTarget(params?: CallParams<DonationArgs['obj']['get_remaining_target()uint512'] | DonationArgs['tuple']['get_remaining_target()uint512']>): DonationComposer<[...TReturns, DonationReturns['get_remaining_target()uint512'] | undefined]>

  /**
   * Calls the update_details(uint512,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateDetails(params?: CallParams<DonationArgs['obj']['update_details(uint512,account)void'] | DonationArgs['tuple']['update_details(uint512,account)void']>): DonationComposer<[...TReturns, DonationReturns['update_details(uint512,account)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Donation smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(params?: CallParams<DonationArgs['obj']['delete()void'] | DonationArgs['tuple']['delete()void']>): DonationComposer<[...TReturns, DonationReturns['delete()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Donation smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DonationComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DonationComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DonationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DonationComposerResults<TReturns>>
}
export type DonationComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

